services:
  nginx:
    build:
      context: .
      dockerfile: .docker/nginx/Dockerfile
    platform: linux/arm64/v8
    container_name: fishing-api-server-nginx
    ports:
      - "8080:80"
    volumes:
      - ./public:/app/public
      - ./.docker/nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - app

  app:
    build:
      context: .
      dockerfile: .docker/php/Dockerfile
    container_name: fishing-api-server-app
    volumes:
      - ".:/app"
      - "./.docker/php/php.ini:/usr/local/etc/php/conf.d/php.ini"
    ports:
      - "9000:9000"
    depends_on:
      - minio
      - mysql

  mysql:
    build:
      context: .
      dockerfile: .docker/mysql/Dockerfile
    container_name: fishing-api-server-mysql
    platform: linux/amd64
    ports:
      - "3306:3306"
    volumes:
      - ".docker/mysql/my.cnf:/etc/mysql/my.cnf"
      - "./storage/mysql:/var/lib/mysql"
      - ".docker/mysql/mysql-docker-entrypoint.sql:/docker-entrypoint-initdb.d/mysql-docker-entrypoint.sql"
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}

  minio:
    image: minio/minio:latest
    container_name: fishing-api-server-minio
    platform: linux/arm64/v8
    ports:
      - "9001:9001"
      - "9002:9002"
    environment:
      MINIO_ROOT_USER: access_key
      MINIO_ROOT_PASSWORD: secret_key
    command: server /export --address :9001 --console-address :9002
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9001/minio/health/ready"]
      interval: 5s
      timeout: 2s
      retries: 5

  create-bucket:
    container_name: fishing-api-server-create-bucket
    image: minio/mc
    entrypoint: [""]
    command:
      - /bin/sh
      - -c
      - |
        until (mc config host add minio http://minio:9001 access_key secret_key) do echo 'wait until add host' && sleep 1; done;
        mc mb minio/fishing-bucket
        mc policy set public minio/fishing-bucket;
    environment:
      MINIO_ROOT_USER: access_key
      MINIO_ROOT_PASSWORD: secret_key
    depends_on:
      minio:
        condition: service_healthy
